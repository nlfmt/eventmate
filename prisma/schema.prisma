// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  events        Event[]
  myEvents      Event[]   @relation("EventAuthor")
  Message       Message[]
}

model Event {
  id           String        @id @default(cuid())
  authorId     String
  author       User          @relation("EventAuthor", fields: [authorId], references: [id])
  capacity     Int?
  participants User[]
  title        String
  date         DateTime
  latitude     Float?
  longitude    Float?
  description  String
  chat         Message[]
  private      Boolean       @default(false)
  requirements Requirement[]

  @@index([authorId], name: "authorId")
}

model Requirement {
  id           String                   @id @default(uuid())
  description  String
  count        Int
  event        Event?                   @relation(fields: [eventId], references: [id])
  eventId      String?
  fulfillments RequirementFulfillment[]

  @@index([eventId], name: "eventId")
}

model RequirementFulfillment {
  id            String      @id @default(uuid())
  quantity      Int
  userId        String
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id])

  @@index([requirementId], name: "requirementId")
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   String?

  @@index([authorId], name: "authorId")
  @@index([eventId], name: "eventId")
}
